{"version":3,"sources":["components/Link.js","components/Header.js","components/widget-components/DropDown.js","components/widget-components/WidgetControls.js","components/widget-components/DoneChart.js","components/widget-components/Goal.js","components/widget-components/GoalField.js","components/widget-types/DisplayDay.js","components/widget-types/DisplayWeek.js","components/widget-types/DisplayMonth.js","components/Dashboard.js","components/Debug.js","classes/DayAPI.js","components/Screen.js","serviceWorker.js","index.js"],"names":["Link","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","styles","brand","color","lastColor","handleMouseEnter","bind","assertThisInitialized","handleMouseLeave","inherits","createClass","key","value","colors","randomNumber","Math","floor","random","length","setState","react_default","a","createElement","className","href","style","onMouseEnter","onMouseLeave","onClick","onClickFunc","children","Component","Header","components_Link","Header_Nav","items","Nav","map","item","Header_NavItem","NavItem","DropDown","handleClick","e","node","contains","target","expanded","toggleExpanded","document","addEventListener","removeEventListener","_this2","day","options","classes","currentSet","function","ref","getDateFormatted","WidgetControls","apply","arguments","type","currentDay","getDayName","weekData","handleDayNav","widget_components_DropDown","onClickControlItem","getDoneRatio","doneGoals","totalGoals","dayGoals","forEach","goal","goalDone","DoneChart","dayStyle","doneRatio","getDayStyle","dayCont","top","percs","width","_this$state","goToDay","dayDate","getDate","substring","toUpperCase","toString","height","renderHorizontal","renderVertical","Goal","Reg","done","goalId","text","Button","GoalField","goals","widget_components_Goal","goalText","onClickGoal","onClickAdd","DisplayDay","newProps","_this$props","setDay","dayAPI","pushDay","today","getToday","getPreviousDay","getNextDay","addGoal","id","toggleGoal","direction","_this$props2","widget_components_WidgetControls","widget_components_DoneChart","widget_components_GoalField","DisplayWeek","getDayByDate","Date","getTime","getWeekOf","data","toPrecision","getWeekData","Dashboard","leftX2","left","main","right","rightX2","currentDisplay","widget_types_DisplayDay","widget_types_DisplayWeek","DisplayMonth","Debug","_getPrototypeOf2","_len","args","Array","_key","concat","container","position","background","padding","button","margin","logAPI","logCurrentDay","DayAPI","daysJSON","response","push","Day","TODAY_DATE","toDateString","date","targetDay","dayId","nextDate","previousDate","firstMonday","search","dayToCheck","getDayRange","console","log","dayOne","dayTwo","returnDays","last","updated","index","dayName","getDay","returnVal","getMonth","getFullYear","resDays","Screen","handleNavClick","view","toLowerCase","newDay","logAPIResponse","components_Header","components_Dashboard","components_Debug","Boolean","window","location","hostname","match","ReactDOM","render","components_Screen","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83ff6034.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n//Stylesheet\nimport \"../styles/Link.css\";\n\nexport class Link extends Component {\n    constructor(props) {\n        super(props);\n\n        //Set States\n        this.state = {\n            //Styles\n            styles: {\n                //The style for the color of the brand\n                brand: {\n                    color: \"#3a3a3a\"\n                }\n            },\n            //lastColor is the last color the hover went to, this avoids repeats :)\n            lastColor: \"#3a3a3a\"\n        };\n\n        //Bind functions\n        this.handleMouseEnter = this.handleMouseEnter.bind(this);\n        this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    }\n\n    /**\n     * handleMouseEnter() will change the color of the brand image\n     * according to a predefined set of colors, stored in colors[].\n     */\n    handleMouseEnter() {\n        const colors = [\n            \"#ec4040\", //Red\n            \"#6fe482\", //Green\n            \"#ec7940\", //orange\n            \"#40b1ec\", //Light Blue\n            \"#4060ec\" //Dark Blue/Purple\n        ];\n\n        //Generate a random number out of the possible colors\n        const randomNumber = Math.floor(Math.random() * colors.length);\n\n        //If the last color is this color, do it again\n        if (this.state.lastColor === colors[randomNumber]) {\n            this.handleMouseEnter();\n        } else {\n            //Set the color style to the value of colors at that index\n            this.setState({\n                styles: { brand: { color: colors[randomNumber] } },\n                lastColor: colors[randomNumber]\n            });\n        }\n    }\n    /**\n     * handleMouseLeave() will change the color of the brand image\n     * to the default value: #3a3a3a\n     */\n    handleMouseLeave() {\n        this.setState({ styles: { brand: { color: \"#3a3a3a\" } } });\n    }\n\n    render() {\n        return (\n            <a\n                className={this.props.className}\n                href={this.props.href}\n                style={this.state.styles.brand}\n                onMouseEnter={this.handleMouseEnter}\n                onMouseLeave={this.handleMouseLeave}\n                onClick={this.props.onClickFunc}\n            >\n                {this.props.children}\n            </a>\n        );\n    }\n}\n\nexport default Link;\n","import React, { Component } from \"react\";\nimport Link from \"./Link\";\n\n//Stylesheet\nimport \"../styles/Header.css\";\n\nexport class Header extends Component {\n    constructor(props) {\n        super(props);\n\n        //Set States\n        this.state = {\n            //Styles\n            styles: {\n                //The style for the color of the brand\n                brand: {\n                    color: \"#3a3a3a\"\n                }\n            },\n            //lastColor is the last color the hover went to, this avoids repeats :)\n            lastColor: \"#3a3a3a\"\n        };\n\n        //Bind functions\n        this.handleMouseEnter = this.handleMouseEnter.bind(this);\n        this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    }\n\n    /**\n     * handleMouseEnter() will change the color of the brand image\n     * according to a predefined set of colors, stored in colors[].\n     */\n    handleMouseEnter() {\n        const colors = [\n            \"#ec4040\", //Red\n            \"#6fe482\", //Green\n            \"#ec7940\", //orange\n            \"#40b1ec\", //Light Blue\n            \"#4060ec\" //Dark Blue/Purple\n        ];\n\n        //Generate a random number out of the possible colors\n        const randomNumber = Math.floor(Math.random() * colors.length);\n\n        //If the last color is this color, do it again\n        if (this.state.lastColor === colors[randomNumber]) {\n            this.handleMouseEnter();\n        } else {\n            //Set the color style to the value of colors at that index\n            this.setState({\n                styles: { brand: { color: colors[randomNumber] } },\n                lastColor: colors[randomNumber]\n            });\n        }\n    }\n    /**\n     * handleMouseLeave() will change the color of the brand image\n     * to the default value: #3a3a3a\n     */\n    handleMouseLeave() {\n        this.setState({ styles: { brand: { color: \"#3a3a3a\" } } });\n    }\n\n    render() {\n        return (\n            <header>\n                <Link className=\"brand\" href=\"#\">\n                    DailyGoals\n                </Link>\n                <Nav\n                    items={[\"DAY\", \"WEEK\", \"MONTH\"]}\n                    onClickFunc={this.props.onClickFunc}\n                />\n            </header>\n        );\n    }\n}\n\nconst Nav = props => {\n    let items = props.items.map(item => {\n        return (\n            <NavItem key={item}>\n                <Link onClickFunc={props.onClickFunc.bind(this, item)}>\n                    {item}\n                </Link>\n            </NavItem>\n        );\n    });\n\n    return (\n        <nav>\n            <ul>{items}</ul>\n        </nav>\n    );\n};\n\nconst NavItem = props => {\n    return <li className=\"nav-item\">{props.children}</li>;\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\n\n//Stylesheet\nimport \"../../styles/DropDown.css\";\n\n/**\n * WidgetControls class creates a widget control + title menu\n */\nclass DropDown extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            expanded: this.props.expanded\n        };\n\n        this.toggleExpanded = this.toggleExpanded.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    //toggleExpanded() will toggle the value of this.state.expanded\n    toggleExpanded() {\n        this.setState({ expanded: !this.state.expanded });\n    }\n\n    //Handle what happens when we click\n    handleClick = e => {\n        if (!this.node.contains(e.target)) {\n            //The click was outside, so toggle expanded to false\n            this.setState({ expanded: false });\n        }\n    };\n\n    componentWillMount() {\n        //Add an event listiner for when a click occurs, track when this comp is mounted\n        document.addEventListener(\"mousedown\", this.handleClick, false);\n    }\n\n    componentWillUnmount() {\n        //Remove the event listener on unmount\n        document.removeEventListener(\"mousedown\", this.handleClick, false);\n    }\n\n    render() {\n        //Shortcut a dayDate variable for later use\n        const { day } = this.props;\n\n        //The list of options in the drop down\n        const options = this.props.options.map(item => {\n            const classes =\n                item === this.props.currentSet\n                    ? \"widget-item current\"\n                    : \"widget-item\";\n            return (\n                <li\n                    className={classes}\n                    onClick={this.props.function.bind(this, item)}\n                    key={item}\n                >\n                    {item}\n                </li>\n            );\n        });\n\n        return (\n            <div\n                className=\"drop-down-container\"\n                onClick={this.toggleExpanded}\n                ref={node => (this.node = node)}\n            >\n                <span className=\"widget-date\">{day.getDateFormatted(\"/\")}</span>\n                <span\n                    className={\n                        this.state.expanded\n                            ? \"widget-carot expanded\"\n                            : \"widget-carot\"\n                    }\n                />\n\n                {this.state.expanded ? (\n                    <div className=\"widget-options expanded\">{options}</div>\n                ) : (\n                    \"\"\n                )}\n            </div>\n        );\n    }\n}\n\nexport default DropDown;\n","import React, { Component } from \"react\";\nimport DropDown from \"./DropDown\";\n\n//Stylesheet\nimport \"../../styles/WidgetControls.css\";\n\nexport class WidgetControls extends Component {\n    render() {\n        return (\n            <div className=\"widget-controls\">\n                <span className=\"widget-title\">\n                    {this.props.type === \"day\"\n                        ? this.props.currentDay.getDayName()\n                        : \"Week of \" +\n                          this.props.weekData[0].getDateFormatted(\"/\")}\n                </span>\n                <span\n                    className=\"widget-previous\"\n                    onClick={this.props.handleDayNav.bind(this, \"<\")}\n                >\n                    &lt;\n                </span>\n                <DropDown\n                    options={\n                        this.props.type === \"day\"\n                            ? [\"Today\", \"Yesterday\", \"Tomorrow\", \"CALENDAR\"]\n                            : [\n                                  \"This Week\",\n                                  \"Last Week\",\n                                  \"Next Week\",\n                                  \"CALENDAR\"\n                              ]\n                    }\n                    function={this.props.onClickControlItem}\n                    expanded={false}\n                    day={this.props.currentDay}\n                />\n\n                <span\n                    className=\"widget-next\"\n                    onClick={this.props.handleDayNav.bind(this, \">\")}\n                >\n                    &gt;\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default WidgetControls;\n","import React, { Component } from \"react\";\n\n//Stylesheet\nimport \"../../styles/DoneChart.css\";\n\nexport class DoneChart extends Component {\n    constructor(props) {\n        super(props);\n        let dayStyle,\n            doneRatio = 0;\n\n        //Get the done ratio if this day has goals\n        if (props.day.dayGoals.length > 0) {\n            doneRatio = getDoneRatio(props.day);\n        }\n\n        //TODO: work on removing the dayInfo from this component\n        dayStyle = this.getDayStyle(props, doneRatio);\n\n        //Assign these values to the state\n        this.state = {\n            dayStyle: dayStyle,\n            doneRatio: doneRatio\n        };\n    }\n\n    componentWillReceiveProps(props) {\n        //If the props are identical, return\n        if (props === this.props) return;\n\n        //Create the variables we will need\n        let dayStyle,\n            doneRatio = 0;\n\n        //Get the done ratio if this day has goals\n        if (props.day.dayGoals.length > 0) {\n            doneRatio = getDoneRatio(props.day);\n        }\n\n        dayStyle = this.getDayStyle(props, doneRatio);\n\n        //Assign the new state\n        this.setState({\n            dayStyle: dayStyle,\n            doneRatio: doneRatio\n        });\n    }\n\n    getDayStyle(props, doneRatio) {\n        //Determine how to style the day info\n        if (props.type === \"vertical\") {\n            if (doneRatio >= 0.75) {\n                //If this bar is 75% to the top\n                return {\n                    //Style for the day name and date\n                    dayCont: {\n                        top: (1 - doneRatio) * 100 + \"%\",\n                        color: \"white\"\n                    },\n                    //Style for the percent\n                    percs: {\n                        top: \"100%\"\n                    }\n                };\n            } else {\n                return {\n                    dayCont: {\n                        top: \"calc(\" + (1 - doneRatio) * 100 + \"% - 74px)\"\n                    },\n                    percs: {\n                        top: \"calc(100% + 8px)\"\n                    }\n                };\n            }\n        }\n    }\n\n    //Render a horizontal chart\n    renderHorizontal() {\n        return (\n            <div\n                className=\"chart-bar extend\"\n                style={{ width: this.doneRatio * 100 + \"%\" }}\n            />\n        );\n    }\n\n    renderVertical() {\n        const { day } = this.props;\n        const { doneRatio, dayStyle } = this.state;\n\n        return (\n            <div\n                className=\"chart-container\"\n                onClick={this.props.goToDay.bind(this, this.props.day)}\n            >\n                <div className=\"chart-day-container\" style={dayStyle.dayCont}>\n                    <span className=\"chart-day-percent\" style={dayStyle.percs}>\n                        {day.dayDate.getDate() + 1}\n                    </span>\n                    <div className=\"dayinfo-container\">\n                        <span className=\"chart-day-name\">\n                            {day\n                                .getDayName()\n                                .substring(0, 3)\n                                .toUpperCase()}\n                        </span>\n                        <span className=\"chart-day-num\">\n                            {Math.floor(doneRatio * 100).toString() + \"%\"}\n                        </span>\n                    </div>\n                </div>\n                <div\n                    className=\"chart-bar extend\"\n                    style={{ height: doneRatio * 100 + \"%\" }}\n                />\n            </div>\n        );\n    }\n\n    render() {\n        const { doneRatio } = this;\n\n        //Push this finished chart to the screen\n        return (\n            <div\n                className={\n                    doneRatio === 1\n                        ? this.props.type + \"-chart full\"\n                        : this.props.type + \"-chart\"\n                }\n            >\n                {this.props.type === \"horizontal\"\n                    ? //Horizontal chart\n                      this.renderHorizontal()\n                    : //Vertical chart\n                      this.renderVertical()}\n            </div>\n        );\n    }\n}\n\n/**\n * getDoneRatio() will return the amount of done goals divided by the\n * total amount of goals\n * @param {JSON} day\n */\nfunction getDoneRatio(day) {\n    let doneGoals = 0;\n    const totalGoals = day.dayGoals.length;\n\n    day.dayGoals.forEach(goal => {\n        if (goal.goalDone === true) doneGoals++;\n    });\n\n    return doneGoals / totalGoals;\n}\n\nexport default DoneChart;\n","import React from \"react\";\n\n//Stylesheet\nimport \"../../styles/Goal.css\";\n\nexport const Goal = {\n    Reg: props => {\n        const classes = props.done ? \"goal done\" : \"goal\";\n        return (\n            <div\n                className={classes}\n                onClick={props.onClick.bind(this, props.goalId)}\n            >\n                <div className=\"goal-body\">{props.text}</div>\n            </div>\n        );\n    },\n\n    Button: props => {\n        return (\n            <div className=\"goal button\">\n                <div\n                    className=\"goal-plus\"\n                    onClick={props.onClick.bind(this, \"Hi!\", false)}\n                >\n                    +\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Goal;\n","import React, { Component } from \"react\";\nimport Goal from \"./Goal\";\n\n//Stylesheet\nimport \"../../styles/GoalField.css\";\n\nexport class GoalField extends Component {\n    render() {\n        let goals = null; //The <Goal /> elements we will return\n\n        if (this.props.goals === null) {\n            //there are not goals\n            goals = \"\";\n        } else {\n            //there are goals\n            const goalInfo = this.props.goals;\n            goals = goalInfo.map(goal => {\n                return (\n                    <Goal.Reg\n                        text={goal.goalText} //The text in the goal block\n                        key={goal.goalId} //The Key for React\n                        done={goal.goalDone}\n                        goalId={goal.goalId}\n                        onClick={this.props.onClickGoal}\n                    />\n                );\n            });\n        }\n\n        return (\n            <div className=\"goal-field\">\n                {goals}\n                <Goal.Button onClick={this.props.onClickAdd} />\n            </div>\n        );\n    }\n}\n\nexport default GoalField;\n","import React, { Component } from \"react\";\nimport WidgetControls from \"../widget-components/WidgetControls\";\nimport DoneChart from \"../widget-components/DoneChart\";\nimport GoalField from \"../widget-components/GoalField\";\n\n//Stylesheet\nimport \"../../styles/DisplayDay.css\";\n\nexport class DisplayDay extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            //This variable will control when the goals should update\n            goals: this.props.currentDay.dayGoals\n        };\n\n        //Bind Functions\n        this.onClickGoal = this.onClickGoal.bind(this);\n        this.onClickAdd = this.onClickAdd.bind(this);\n        this.onClickControlItem = this.onClickControlItem.bind(this);\n        this.handleDayNav = this.handleDayNav.bind(this);\n    }\n\n    //This method will update the goals whenever currentDay changes\n    componentWillReceiveProps(newProps) {\n        if (newProps.currentDay.dayGoals !== this.state.goals) {\n            this.setState({ goals: newProps.currentDay.dayGoals });\n        }\n    }\n\n    /**\n     * onClickControlItem() will fire when an item in the control menu is selected\n     */\n    onClickControlItem(item) {\n        //Get the dayAPI and setDay function from props\n        const { setDay, dayAPI } = this.props;\n\n        //Before we do anything, save the day by pushing to file/database\n        dayAPI.pushDay(this.props.currentDay);\n\n        //Get Today's Day\n        const today = dayAPI.getToday();\n\n        //Do something based on the item clicked\n        switch (item) {\n            case \"Today\":\n                setDay(today);\n                break;\n            case \"Yesterday\":\n                setDay(dayAPI.getPreviousDay(today));\n                break;\n            case \"Tomorrow\":\n                setDay(dayAPI.getNextDay(today));\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * onClickAdd() will fire when the \"add goal\" box is clicked\n     */\n    onClickAdd(goalText, goalDone) {\n        const { currentDay } = this.props;\n        this.setState({\n            goals: currentDay.addGoal(goalText, goalDone).dayGoals\n        });\n    }\n\n    /**\n     * onClickGoal() will fire when a goal block is clicked, toggling it's done state\n     */\n    onClickGoal(id) {\n        const { currentDay } = this.props;\n        this.setState({ goals: currentDay.toggleGoal(id).dayGoals });\n    }\n\n    /**\n     * handleDayNav fires when a directional arrow is clicked in widget-controls\n     * @param {string} direction The direction to get the consecutive day\n     */\n    handleDayNav(direction) {\n        const { setDay, dayAPI, currentDay } = this.props;\n\n        if (direction === \">\") {\n            setDay(dayAPI.getNextDay(currentDay));\n        } else if (direction === \"<\") {\n            setDay(dayAPI.getPreviousDay(currentDay));\n        }\n    }\n\n    //TODO: Extract widget-controls to it's own component \"Widget\" with type=\"day\" DONE.\n    //AFTER DOING THAT: Making animations between the widgets should be much easier\n    //QUESTION FOR MYSELF: Should DisplayDay's Widgets be a different component than DisplayWeek's?\n    render() {\n        return (\n            <div className=\"widget\" style={this.props.style}>\n                <div className=\"widget-controls-container\">\n                    <WidgetControls\n                        type={\"day\"}\n                        currentDay={this.props.currentDay}\n                        handleDayNav={this.handleDayNav}\n                        onClickControlItem={this.onClickControlItem}\n                    />\n                </div>\n                <div className=\"widget-body\">\n                    <DoneChart day={this.props.currentDay} type=\"horizontal\" />\n\n                    <GoalField\n                        goals={this.state.goals}\n                        onClickGoal={this.onClickGoal}\n                        onClickAdd={this.onClickAdd}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DisplayDay;\n","import React, { Component } from \"react\";\nimport DoneChart from \"../widget-components/DoneChart\";\nimport WidgetControls from \"../widget-components/WidgetControls\";\n\n//Stylesheet\nimport \"../../styles/DisplayWeek.css\";\n\nexport class DisplayWeek extends Component {\n    constructor(props) {\n        super(props);\n\n        //Bind Functions\n        this.onClickControlItem = this.onClickControlItem.bind(this);\n        this.handleDayNav = this.handleDayNav.bind(this);\n    }\n\n    onClickControlItem(item) {\n        //Get the dayAPI from props\n        const { dayAPI, setDay } = this.props;\n\n        //Get Today's Day\n        const today = dayAPI.getToday();\n        const sevenDaysInMs = 86400000 * 7;\n\n        //Do something based on the item clicked\n        switch (item) {\n            case \"This Week\":\n                //Set day to today\n                setDay(today);\n                break;\n            case \"Last Week\":\n                //Set day to seven days ago\n                setDay(\n                    dayAPI.getDayByDate(\n                        new Date(today.dayDate.getTime() - sevenDaysInMs)\n                    )\n                );\n                break;\n            case \"Next Week\":\n                //Set day to seven days from now\n                setDay(\n                    dayAPI.getDayByDate(\n                        new Date(today.dayDate.getTime() + sevenDaysInMs)\n                    )\n                );\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * handleDayNav fires when a directional arrow is clicked in widget-controls\n     * @param {string} direction The direction to get the consecutive day\n     */\n    handleDayNav(direction) {\n        const { setDay, dayAPI, currentDay } = this.props;\n        const sevenDaysInMs = 86400000 * 7;\n\n        if (direction === \">\") {\n            setDay(\n                dayAPI.getDayByDate(\n                    new Date(currentDay.dayDate.getTime() + sevenDaysInMs)\n                )\n            );\n        } else if (direction === \"<\") {\n            setDay(\n                dayAPI.getDayByDate(\n                    new Date(currentDay.dayDate.getTime() - sevenDaysInMs)\n                )\n            );\n        }\n    }\n\n    getWeekData(day) {\n        const weekData = this.props.dayAPI.getWeekOf(day);\n        return (\n            <div className=\"widget\" style={this.props.style}>\n                <div className=\"widget-controls-container\">\n                    <WidgetControls\n                        type={\"week\"}\n                        currentDay={this.props.currentDay}\n                        weekData={weekData}\n                        handleDayNav={this.handleDayNav}\n                        onClickControlItem={this.onClickControlItem}\n                    />\n                </div>\n                <div className=\"widget-body week\">\n                    {weekData.map(data => {\n                        return (\n                            <DoneChart\n                                day={data}\n                                type=\"vertical\"\n                                goToDay={this.props.goToDay}\n                                key={Math.random().toPrecision(3)}\n                            />\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return this.getWeekData(this.props.currentDay);\n    }\n}\n\nexport default DisplayWeek;\n","import React, { Component } from \"react\";\n\nexport class DisplayWeek extends Component {\n    render() {\n        return (\n            <div className=\"widget\" style={this.props.style}>\n                Month\n            </div>\n        );\n    }\n}\n\nexport default DisplayWeek;\n","import React, { Component } from \"react\";\nimport DisplayDay from \"./widget-types/DisplayDay\";\nimport DisplayWeek from \"./widget-types/DisplayWeek\";\nimport DisplayMonth from \"./widget-types/DisplayMonth\";\n\n//Stylesheet\nimport \"../styles/Dashboard.css\";\n\nexport class Dashboard extends Component {\n    constructor(props) {\n        super(props);\n\n        //These are styles for transitions but I removed those\n        this.styles = {\n            leftX2: {\n                left: \"-200%\"\n            },\n            left: {\n                left: \"-100%\"\n            },\n            main: {\n                left: \"0%\"\n            },\n            right: {\n                left: \"100%\"\n            },\n            rightX2: {\n                left: \"200%\"\n            }\n        };\n    }\n\n    render() {\n        const { currentDisplay } = this.props;\n\n        return (\n            <main id=\"dashboard-container\">\n                {currentDisplay === \"day\" && (\n                    <DisplayDay\n                        currentDay={this.props.currentDay}\n                        dayAPI={this.props.dayAPI}\n                        setDay={this.props.setDay}\n                    />\n                )}\n\n                {currentDisplay === \"week\" && (\n                    <DisplayWeek\n                        currentDay={this.props.currentDay}\n                        dayAPI={this.props.dayAPI}\n                        goToDay={this.props.goToDay}\n                        setDay={this.props.setDay}\n                    />\n                )}\n\n                {currentDisplay === \"month\" && (\n                    <DisplayMonth\n                        currentDay={this.props.currentDay}\n                        dayAPI={this.props.dayAPI}\n                        goToDay={this.props.goToDay}\n                        setDay={this.props.setDay}\n                    />\n                )}\n            </main>\n        );\n    }\n}\n\nexport default Dashboard;\n","import React, { Component } from \"react\";\n\nexport class Debug extends Component {\n    style = {\n        container: {\n            position: \"fixed\",\n            top: \"60px\",\n            left: \"100px\",\n            background: \"#3a3a3a\",\n            padding: \"16px\",\n            color: \"white\"\n        },\n        button: {\n            padding: \"3px\",\n            margin: \"8px 0\"\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"debug-controls\" style={this.style.container}>\n                <p>Debug Panel</p>\n                <input\n                    type=\"button\"\n                    value=\"log DayAPI.response\"\n                    onClick={this.props.logAPI.bind(this)}\n                    style={this.style.button}\n                />\n                <br />\n                <input\n                    type=\"button\"\n                    value=\"log this.state.currentDay\"\n                    onClick={this.props.logCurrentDay.bind(this)}\n                    style={this.style.button}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Debug;\n","/**\n * * For testing purpose the database is being represented\n * by a JSON file located in src called \"userDays.json\".\n * * This file is being fetched in the react app when a client\n * connects, then sent to this class for easier interaction.\n * * All instances of writing to the file should be replaced with\n * Database queries.\n */\n\n/**\n * DayAPI Class\n * Description: The interface to interact with the Day data\n */\nexport class DayAPI {\n    response = []; //This is the response from the constructor\n\n    /**\n     * Constructor will take in JSON data in the structure outlined in userDays.json\n     * @param {JSON} daysJSON JSON data of the days\n     */\n    constructor(daysJSON) {\n        daysJSON.forEach(day => {\n            this.response.push(new Day(day));\n        });\n    }\n\n    /**\n     * getToday() will return the current day\n     */\n    getToday() {\n        //TODO: This is temporary because no database is being used\n        //DEBUG: until I go live with a database, \"today\" will be 11/16/2018\n        const TODAY_DATE = new Date(\"2018-11-16\");\n        let today;\n        this.response.forEach(day => {\n            const dateToCompare = new Date(day.dayDate);\n\n            if (dateToCompare.toDateString() === TODAY_DATE.toDateString()) {\n                today = new Day(day);\n            }\n        });\n        return today;\n    }\n\n    /**\n     * getDayByDate() returns a day found with date, or a new day with the specified date.\n     * @param {Date} date The numerical date to attempt retreive\n     */\n    getDayByDate(date) {\n        let targetDay = null; //The day info we will return\n\n        //For every day in the response, search the year month and num until you find a match\n        this.response.forEach(day => {\n            //Set the date that we will compare to the requested date\n            const dateToCompare = new Date(day.dayDate);\n\n            if (dateToCompare.toDateString() === date.toDateString()) {\n                targetDay = day;\n            }\n        });\n\n        //If the above search failed, return a new day with the searched for date but do not create a reference\n        if (targetDay == null) {\n            targetDay = {\n                dayId: this.response.length,\n                dayDate: date,\n                dayGoals: []\n            };\n            const newDay = new Day(targetDay);\n            return newDay;\n        }\n\n        return targetDay;\n    }\n\n    /**\n     * getNextDay() will return the next day relative to the input day\n     * @param {Day} day The day to reference\n     */\n    getNextDay(day) {\n        //Get the nextDate/add a day in miliseconds\n        const nextDate = new Date(day.dayDate.getTime() + 86400000);\n        //Return the day located at this date\n        return this.getDayByDate(nextDate);\n    }\n\n    /**\n     * getPreviousDay() will return the Previous day relative to the input day\n     * @param {Day} day The day to reference\n     */\n    getPreviousDay(day) {\n        //Get the PreviousDate/add a day in miliseconds\n        const previousDate = new Date(day.dayDate.getTime() - 86400000);\n        //Return the day located at this date\n        return this.getDayByDate(previousDate);\n    }\n\n    /**\n     * getWeekOf() takes a day and returns an array length 7 of the days within that week.\n     * Weeks start on Mondays.\n     * @param {Day} day The day of which we want to retrieve the week\n     */\n    getWeekOf(day) {\n        //If we aren't given a day\n        if (!day) {\n            console.log(\"Error- Requested getWeekOf without a day parameter\");\n            return;\n        }\n\n        //The first day of this week\n        let firstMonday;\n\n        //Determine if this day is a Monday\n        if (day.getDayName() === \"Monday\") {\n            //This day is a Monday\n            firstMonday = day;\n        } else {\n            //Go backwards until we hit the first Monday\n            let search = true; //Loop controller\n            let dayToCheck = day; //The day to check within the loop\n\n            //Linear search backwards\n            while (search) {\n                //Assign dayToCheck to the previous day\n                dayToCheck = this.getPreviousDay(dayToCheck);\n\n                //If dayCheck is a Monday\n                if (dayToCheck.getDayName() === \"Monday\") {\n                    search = false; //Stop the loop\n                    firstMonday = dayToCheck; //Assign first Monday to this day\n                }\n            }\n        }\n\n        //Now that we have the first Monday, we can go through the next 7 days, add them\n        //to an array, and return that array\n        const week = this.getDayRange(firstMonday, 6);\n\n        return week;\n    }\n\n    /**\n     * getDayRange() will return an array of days between the first day given, and the numerical range\n     * or second day given (exclusive).\n     * @param {Day} dayOne The first day (inclusive) in the range\n     * @param {Day/Int} dayTwo Either the second day in the range, or an int\n     */\n    getDayRange(dayOne, dayTwo) {\n        let returnDays = [];\n\n        //If the second variable is an int instead of a Day\n        if (typeof dayTwo === \"number\") {\n            const last = dayTwo;\n            let currentDay = dayOne;\n\n            returnDays.push(currentDay);\n\n            for (let id = 0; id < last; id++) {\n                returnDays.push(this.getNextDay(currentDay));\n                currentDay = this.getNextDay(currentDay);\n            }\n\n            return returnDays;\n        } else {\n            return 'THIS HASN\"T BEEN IMPLEMENTED YET!!';\n        }\n    }\n\n    /**\n     * logAPIResponse() will simply log the current value of DayAPI.state.response\n     */\n    logAPIResponse() {\n        console.log(this.response);\n    }\n\n    /**\n     * pushDay() will push a session reference to this day to the API, so it won't create\n     * replicas of the Day in memory.\n     * NOTE: This does not update the database (testing: the JSON file), only the\n     * memory reference to the result. A future method will sync this file with the database\n     * (THIS IS A REALLY BAD WAY OF DOING THIS, IMPLEMENT THE DATABASE AFTER MONTHS)\n     * @param {Day} day The day to push into the API memory\n     */\n    pushDay(day) {\n        //Control variable so we know if the array updated\n        let updated = false;\n        //(Linear search) Loop through the days and update them if this day matches, add it if not\n        for (let index = 0; index < this.response.length; index++) {\n            if (this.response[index].dayId === day.dayId) {\n                //The day already exists, so update the goals\n                this.response[index] = day;\n                return day;\n            } else {\n                //The day does not exist\n                updated = false;\n            }\n        }\n        //If the array did not update, push the day into it\n        if (!updated) this.response.push(day);\n        //Exit by returning the new day reference\n        return day;\n    }\n}\n\n/**\n * Day Class\n * Description: Holds the data for a specific day\n */\nclass Day {\n    constructor(day) {\n        this.dayId = day.dayId;\n        this.dayDate = new Date(day.dayDate);\n        this.dayGoals = day.dayGoals;\n    }\n\n    /**\n     * toggleGoal() will toggle the \"done-ness\" of a goal in this day\n     * @param {int} goalId The ID of the Goal you would like to toggle\n     */\n    toggleGoal(goalId) {\n        this.dayGoals.forEach(goal => {\n            if (goal.goalId === goalId) {\n                goal.goalDone = !goal.goalDone;\n            }\n        });\n        return this;\n    }\n\n    /**\n     * addGoal() will add a goal to the current day object (not database), and return the day\n     * @param {String} goalText The text of the goal\n     * @param {Boolean} goalDone The boolean done-ness of this goal\n     */\n    addGoal(goalText, goalDone) {\n        const done = goalDone || false;\n        const text = goalText;\n        const id = this.dayGoals.length ? this.dayGoals.length : 0;\n\n        this.dayGoals.push({ goalId: id, goalText: text, goalDone: done });\n        return this;\n    }\n\n    /**\n     * dayName() returns the this day's name.\n     */\n    getDayName() {\n        //Default value/error value\n        let dayName;\n\n        switch (this.dayDate.getDay()) {\n            case 0:\n                dayName = \"Monday\";\n                break;\n            case 1:\n                dayName = \"Tuesday\";\n                break;\n            case 2:\n                dayName = \"Wednesday\";\n                break;\n            case 3:\n                dayName = \"Thursday\";\n                break;\n            case 4:\n                dayName = \"Friday\";\n                break;\n            case 5:\n                dayName = \"Saturday\";\n                break;\n            case 6:\n                dayName = \"Sunday\";\n                break;\n            default:\n                dayName =\n                    \"Error - dayName() Name cannot be determined: \" +\n                    this.dayDate.toString();\n                break;\n        }\n        return dayName;\n    }\n\n    /**\n     * getDateFormatted() will return a string of this day's formatted date\n     * @param {String} type The format to return: /, -, f\n     */\n    getDateFormatted(type) {\n        if (typeof type !== \"string\") {\n            return \"getDateFormatted - Attempted to create formatted date without type\";\n        }\n\n        const { dayDate } = this;\n        let returnVal;\n\n        switch (type) {\n            case \"/\":\n                returnVal =\n                    dayDate.getMonth() +\n                    1 +\n                    \"/\" +\n                    (dayDate.getDate() + 1) +\n                    \"/\" +\n                    dayDate.getFullYear();\n                break;\n            case \"-\":\n                returnVal =\n                    dayDate.getMonth() +\n                    1 +\n                    \"-\" +\n                    (dayDate.getDate() + 1) +\n                    \"-\" +\n                    dayDate.getFullYear();\n                break;\n            case \"f\":\n                returnVal =\n                    dayDate.getMonth() +\n                    1 +\n                    \"-\" +\n                    (dayDate.getDate() + 1) +\n                    \"-\" +\n                    dayDate.getFullYear();\n                break;\n        }\n        return returnVal;\n    }\n}\n\nexport default DayAPI;\n","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport Dashboard from \"./Dashboard\";\nimport Debug from \"./Debug\";\n\n//Stylesheet\nimport \"../styles/Screen.css\";\n\n//temp\nimport resDays from \"../userDays.json\";\nimport DayAPI from \"../classes/DayAPI\";\nconst dayAPI = new DayAPI(resDays);\n\nclass Screen extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentDisplay: \"day\", //Default dispaly\n            currentDay: dayAPI.getToday() //Default day\n        };\n\n        //Bind functions\n        this.handleNavClick = this.handleNavClick.bind(this);\n        this.goToDay = this.goToDay.bind(this);\n        this.setDay = this.setDay.bind(this);\n\n        //Bind debug methods\n        this.logCurrentDay = this.logCurrentDay.bind(this);\n    }\n\n    handleNavClick(view) {\n        if (this.state.currentDay.dayGoals !== 0) {\n            dayAPI.pushDay(this.state.currentDay);\n        }\n        //Set the currentDisplay to what is clicked\n        this.setState({ currentDisplay: view.toLowerCase() });\n    }\n\n    /**\n     * Note: This method will change the view to day AND change the current day\n     *\n     */\n    goToDay(day) {\n        this.setState({\n            currentDisplay: \"day\",\n            currentDay: dayAPI.getDayByDate(day.dayDate)\n        });\n    }\n\n    /**\n     * Note: This method is ONLY change the current day set\n     *\n     */\n    setDay(day) {\n        const lastDay = this.state.currentDay;\n        const newDay = day;\n\n        this.setState({ currentDay: newDay });\n    }\n\n    //DEBUG\n    logAPI() {\n        dayAPI.logAPIResponse();\n    }\n\n    logCurrentDay() {\n        console.log(this.state.currentDay);\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <Header onClickFunc={this.handleNavClick} />\n                <Dashboard\n                    currentDisplay={this.state.currentDisplay}\n                    currentDay={this.state.currentDay}\n                    goToDay={this.goToDay}\n                    dayAPI={dayAPI}\n                    setDay={this.setDay}\n                />\n                <Debug\n                    logAPI={this.logAPI}\n                    logCurrentDay={this.logCurrentDay}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Screen;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Screen from \"./components/Screen\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Screen />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}